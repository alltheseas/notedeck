// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

//! # Bindings to the `Metal` framework
//!
//!
//! ## Example
//!
//! Drawing a rotating triangle.
//!
//! ```ignore
#![doc = include_str!("../../../examples/metal.rs")]
//! ```

#[path = "../../additions/Metal/mod.rs"]
mod additions;
pub use self::additions::*;

#[path = "../../fixes/Metal/mod.rs"]
mod fixes;
pub use self::fixes::*;

#[cfg_attr(feature = "apple", link(name = "Metal", kind = "framework"))]
extern "C" {}

#[path = "MTLAccelerationStructure.rs"]
mod __MTLAccelerationStructure;
#[path = "MTLAccelerationStructureCommandEncoder.rs"]
mod __MTLAccelerationStructureCommandEncoder;
#[path = "MTLAccelerationStructureTypes.rs"]
mod __MTLAccelerationStructureTypes;
#[path = "MTLArgument.rs"]
mod __MTLArgument;
#[path = "MTLArgumentEncoder.rs"]
mod __MTLArgumentEncoder;
#[path = "MTLBinaryArchive.rs"]
mod __MTLBinaryArchive;
#[path = "MTLBlitCommandEncoder.rs"]
mod __MTLBlitCommandEncoder;
#[path = "MTLBlitPass.rs"]
mod __MTLBlitPass;
#[path = "MTLBuffer.rs"]
mod __MTLBuffer;
#[path = "MTLCaptureManager.rs"]
mod __MTLCaptureManager;
#[path = "MTLCaptureScope.rs"]
mod __MTLCaptureScope;
#[path = "MTLCommandBuffer.rs"]
mod __MTLCommandBuffer;
#[path = "MTLCommandEncoder.rs"]
mod __MTLCommandEncoder;
#[path = "MTLCommandQueue.rs"]
mod __MTLCommandQueue;
#[path = "MTLComputeCommandEncoder.rs"]
mod __MTLComputeCommandEncoder;
#[path = "MTLComputePass.rs"]
mod __MTLComputePass;
#[path = "MTLComputePipeline.rs"]
mod __MTLComputePipeline;
#[path = "MTLCounters.rs"]
mod __MTLCounters;
#[path = "MTLDefines.rs"]
mod __MTLDefines;
#[path = "MTLDepthStencil.rs"]
mod __MTLDepthStencil;
#[path = "MTLDevice.rs"]
mod __MTLDevice;
#[path = "MTLDrawable.rs"]
mod __MTLDrawable;
#[path = "MTLDynamicLibrary.rs"]
mod __MTLDynamicLibrary;
#[path = "MTLEvent.rs"]
mod __MTLEvent;
#[path = "MTLFence.rs"]
mod __MTLFence;
#[path = "MTLFunctionConstantValues.rs"]
mod __MTLFunctionConstantValues;
#[path = "MTLFunctionDescriptor.rs"]
mod __MTLFunctionDescriptor;
#[path = "MTLFunctionHandle.rs"]
mod __MTLFunctionHandle;
#[path = "MTLFunctionLog.rs"]
mod __MTLFunctionLog;
#[path = "MTLFunctionStitching.rs"]
mod __MTLFunctionStitching;
#[path = "MTLHeap.rs"]
mod __MTLHeap;
#[path = "MTLIOCommandBuffer.rs"]
mod __MTLIOCommandBuffer;
#[path = "MTLIOCommandQueue.rs"]
mod __MTLIOCommandQueue;
#[path = "MTLIOCompressor.rs"]
mod __MTLIOCompressor;
#[path = "MTLIndirectCommandBuffer.rs"]
mod __MTLIndirectCommandBuffer;
#[path = "MTLIndirectCommandEncoder.rs"]
mod __MTLIndirectCommandEncoder;
#[path = "MTLIntersectionFunctionTable.rs"]
mod __MTLIntersectionFunctionTable;
#[path = "MTLLibrary.rs"]
mod __MTLLibrary;
#[path = "MTLLinkedFunctions.rs"]
mod __MTLLinkedFunctions;
#[path = "MTLParallelRenderCommandEncoder.rs"]
mod __MTLParallelRenderCommandEncoder;
#[path = "MTLPipeline.rs"]
mod __MTLPipeline;
#[path = "MTLPixelFormat.rs"]
mod __MTLPixelFormat;
#[path = "MTLRasterizationRate.rs"]
mod __MTLRasterizationRate;
#[path = "MTLRenderCommandEncoder.rs"]
mod __MTLRenderCommandEncoder;
#[path = "MTLRenderPass.rs"]
mod __MTLRenderPass;
#[path = "MTLRenderPipeline.rs"]
mod __MTLRenderPipeline;
#[path = "MTLResource.rs"]
mod __MTLResource;
#[path = "MTLResourceStateCommandEncoder.rs"]
mod __MTLResourceStateCommandEncoder;
#[path = "MTLResourceStatePass.rs"]
mod __MTLResourceStatePass;
#[path = "MTLSampler.rs"]
mod __MTLSampler;
#[path = "MTLStageInputOutputDescriptor.rs"]
mod __MTLStageInputOutputDescriptor;
#[path = "MTLTexture.rs"]
mod __MTLTexture;
#[path = "MTLTypes.rs"]
mod __MTLTypes;
#[path = "MTLVertexDescriptor.rs"]
mod __MTLVertexDescriptor;
#[path = "MTLVisibleFunctionTable.rs"]
mod __MTLVisibleFunctionTable;

pub use self::__MTLAccelerationStructure::MTLAccelerationStructure;
#[cfg(feature = "Metal_MTLAccelerationStructureBoundingBoxGeometryDescriptor")]
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureBoundingBoxGeometryDescriptor;
#[cfg(feature = "Metal_MTLAccelerationStructureCurveGeometryDescriptor")]
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureCurveGeometryDescriptor;
#[cfg(feature = "Metal_MTLAccelerationStructureDescriptor")]
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureDescriptor;
#[cfg(feature = "Metal_MTLAccelerationStructureGeometryDescriptor")]
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureGeometryDescriptor;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureInstanceDescriptor;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureInstanceDescriptorType;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureInstanceOptions;
#[cfg(feature = "Metal_MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor")]
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor;
#[cfg(feature = "Metal_MTLAccelerationStructureMotionCurveGeometryDescriptor")]
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureMotionCurveGeometryDescriptor;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureMotionInstanceDescriptor;
#[cfg(feature = "Metal_MTLAccelerationStructureMotionTriangleGeometryDescriptor")]
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureMotionTriangleGeometryDescriptor;
#[cfg(feature = "Metal_MTLAccelerationStructureTriangleGeometryDescriptor")]
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureTriangleGeometryDescriptor;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureUsage;
pub use self::__MTLAccelerationStructure::MTLAccelerationStructureUserIDInstanceDescriptor;
pub use self::__MTLAccelerationStructure::MTLCurveBasis;
pub use self::__MTLAccelerationStructure::MTLCurveEndCaps;
pub use self::__MTLAccelerationStructure::MTLCurveType;
pub use self::__MTLAccelerationStructure::MTLIndirectAccelerationStructureInstanceDescriptor;
pub use self::__MTLAccelerationStructure::MTLIndirectAccelerationStructureMotionInstanceDescriptor;
#[cfg(feature = "Metal_MTLIndirectInstanceAccelerationStructureDescriptor")]
pub use self::__MTLAccelerationStructure::MTLIndirectInstanceAccelerationStructureDescriptor;
#[cfg(feature = "Metal_MTLInstanceAccelerationStructureDescriptor")]
pub use self::__MTLAccelerationStructure::MTLInstanceAccelerationStructureDescriptor;
pub use self::__MTLAccelerationStructure::MTLMotionBorderMode;
#[cfg(feature = "Metal_MTLMotionKeyframeData")]
pub use self::__MTLAccelerationStructure::MTLMotionKeyframeData;
#[cfg(feature = "Metal_MTLPrimitiveAccelerationStructureDescriptor")]
pub use self::__MTLAccelerationStructure::MTLPrimitiveAccelerationStructureDescriptor;
pub use self::__MTLAccelerationStructure::{
    MTLAccelerationStructureInstanceDescriptorTypeDefault,
    MTLAccelerationStructureInstanceDescriptorTypeIndirect,
    MTLAccelerationStructureInstanceDescriptorTypeIndirectMotion,
    MTLAccelerationStructureInstanceDescriptorTypeMotion,
    MTLAccelerationStructureInstanceDescriptorTypeUserID,
};
pub use self::__MTLAccelerationStructure::{
    MTLAccelerationStructureInstanceOptionDisableTriangleCulling,
    MTLAccelerationStructureInstanceOptionNonOpaque, MTLAccelerationStructureInstanceOptionNone,
    MTLAccelerationStructureInstanceOptionOpaque,
    MTLAccelerationStructureInstanceOptionTriangleFrontFacingWindingCounterClockwise,
};
pub use self::__MTLAccelerationStructure::{
    MTLAccelerationStructureUsageExtendedLimits, MTLAccelerationStructureUsageNone,
    MTLAccelerationStructureUsagePreferFastBuild, MTLAccelerationStructureUsageRefit,
};
pub use self::__MTLAccelerationStructure::{
    MTLCurveBasisBSpline, MTLCurveBasisBezier, MTLCurveBasisCatmullRom, MTLCurveBasisLinear,
};
pub use self::__MTLAccelerationStructure::{
    MTLCurveEndCapsDisk, MTLCurveEndCapsNone, MTLCurveEndCapsSphere,
};
pub use self::__MTLAccelerationStructure::{MTLCurveTypeFlat, MTLCurveTypeRound};
pub use self::__MTLAccelerationStructure::{MTLMotionBorderModeClamp, MTLMotionBorderModeVanish};
pub use self::__MTLAccelerationStructureCommandEncoder::MTLAccelerationStructureCommandEncoder;
#[cfg(feature = "Metal_MTLAccelerationStructurePassDescriptor")]
pub use self::__MTLAccelerationStructureCommandEncoder::MTLAccelerationStructurePassDescriptor;
#[cfg(feature = "Metal_MTLAccelerationStructurePassSampleBufferAttachmentDescriptor")]
pub use self::__MTLAccelerationStructureCommandEncoder::MTLAccelerationStructurePassSampleBufferAttachmentDescriptor;
#[cfg(feature = "Metal_MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArray")]
pub use self::__MTLAccelerationStructureCommandEncoder::MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArray;
pub use self::__MTLAccelerationStructureCommandEncoder::MTLAccelerationStructureRefitOptions;
pub use self::__MTLAccelerationStructureCommandEncoder::{
    MTLAccelerationStructureRefitOptionPerPrimitiveData,
    MTLAccelerationStructureRefitOptionVertexData,
};
pub use self::__MTLAccelerationStructureTypes::MTLAxisAlignedBoundingBox;
pub use self::__MTLAccelerationStructureTypes::MTLPackedFloat4x3;
pub(crate) use self::__MTLAccelerationStructureTypes::_MTLAxisAlignedBoundingBox;
pub(crate) use self::__MTLAccelerationStructureTypes::_MTLPackedFloat4x3;
#[cfg(feature = "Metal_MTLArgument")]
pub use self::__MTLArgument::MTLArgument;
pub use self::__MTLArgument::MTLArgumentAccess;
pub use self::__MTLArgument::MTLArgumentType;
#[cfg(feature = "Metal_MTLArrayType")]
pub use self::__MTLArgument::MTLArrayType;
pub use self::__MTLArgument::MTLBinding;
pub use self::__MTLArgument::MTLBindingAccess;
pub use self::__MTLArgument::MTLBindingType;
pub use self::__MTLArgument::MTLBufferBinding;
pub use self::__MTLArgument::MTLDataType;
pub use self::__MTLArgument::MTLObjectPayloadBinding;
#[cfg(feature = "Metal_MTLPointerType")]
pub use self::__MTLArgument::MTLPointerType;
#[cfg(feature = "Metal_MTLStructMember")]
pub use self::__MTLArgument::MTLStructMember;
#[cfg(feature = "Metal_MTLStructType")]
pub use self::__MTLArgument::MTLStructType;
pub use self::__MTLArgument::MTLTextureBinding;
#[cfg(feature = "Metal_MTLTextureReferenceType")]
pub use self::__MTLArgument::MTLTextureReferenceType;
pub use self::__MTLArgument::MTLThreadgroupBinding;
#[cfg(feature = "Metal_MTLType")]
pub use self::__MTLArgument::MTLType;
pub use self::__MTLArgument::{
    MTLArgumentAccessReadOnly, MTLArgumentAccessReadWrite, MTLArgumentAccessWriteOnly,
    MTLBindingAccessReadOnly, MTLBindingAccessReadWrite, MTLBindingAccessWriteOnly,
};
pub use self::__MTLArgument::{
    MTLArgumentTypeBuffer, MTLArgumentTypeImageblock, MTLArgumentTypeImageblockData,
    MTLArgumentTypeInstanceAccelerationStructure, MTLArgumentTypeIntersectionFunctionTable,
    MTLArgumentTypePrimitiveAccelerationStructure, MTLArgumentTypeSampler, MTLArgumentTypeTexture,
    MTLArgumentTypeThreadgroupMemory, MTLArgumentTypeVisibleFunctionTable,
};
pub use self::__MTLArgument::{
    MTLBindingTypeBuffer, MTLBindingTypeImageblock, MTLBindingTypeImageblockData,
    MTLBindingTypeInstanceAccelerationStructure, MTLBindingTypeIntersectionFunctionTable,
    MTLBindingTypeObjectPayload, MTLBindingTypePrimitiveAccelerationStructure,
    MTLBindingTypeSampler, MTLBindingTypeTexture, MTLBindingTypeThreadgroupMemory,
    MTLBindingTypeVisibleFunctionTable,
};
pub use self::__MTLArgument::{
    MTLDataTypeArray, MTLDataTypeBFloat, MTLDataTypeBFloat2, MTLDataTypeBFloat3,
    MTLDataTypeBFloat4, MTLDataTypeBool, MTLDataTypeBool2, MTLDataTypeBool3, MTLDataTypeBool4,
    MTLDataTypeChar, MTLDataTypeChar2, MTLDataTypeChar3, MTLDataTypeChar4,
    MTLDataTypeComputePipeline, MTLDataTypeFloat, MTLDataTypeFloat2, MTLDataTypeFloat2x2,
    MTLDataTypeFloat2x3, MTLDataTypeFloat2x4, MTLDataTypeFloat3, MTLDataTypeFloat3x2,
    MTLDataTypeFloat3x3, MTLDataTypeFloat3x4, MTLDataTypeFloat4, MTLDataTypeFloat4x2,
    MTLDataTypeFloat4x3, MTLDataTypeFloat4x4, MTLDataTypeHalf, MTLDataTypeHalf2,
    MTLDataTypeHalf2x2, MTLDataTypeHalf2x3, MTLDataTypeHalf2x4, MTLDataTypeHalf3,
    MTLDataTypeHalf3x2, MTLDataTypeHalf3x3, MTLDataTypeHalf3x4, MTLDataTypeHalf4,
    MTLDataTypeHalf4x2, MTLDataTypeHalf4x3, MTLDataTypeHalf4x4, MTLDataTypeIndirectCommandBuffer,
    MTLDataTypeInstanceAccelerationStructure, MTLDataTypeInt, MTLDataTypeInt2, MTLDataTypeInt3,
    MTLDataTypeInt4, MTLDataTypeIntersectionFunctionTable, MTLDataTypeLong, MTLDataTypeLong2,
    MTLDataTypeLong3, MTLDataTypeLong4, MTLDataTypeNone, MTLDataTypePointer,
    MTLDataTypePrimitiveAccelerationStructure, MTLDataTypeR16Snorm, MTLDataTypeR16Unorm,
    MTLDataTypeR8Snorm, MTLDataTypeR8Unorm, MTLDataTypeRG11B10Float, MTLDataTypeRG16Snorm,
    MTLDataTypeRG16Unorm, MTLDataTypeRG8Snorm, MTLDataTypeRG8Unorm, MTLDataTypeRGB10A2Unorm,
    MTLDataTypeRGB9E5Float, MTLDataTypeRGBA16Snorm, MTLDataTypeRGBA16Unorm, MTLDataTypeRGBA8Snorm,
    MTLDataTypeRGBA8Unorm, MTLDataTypeRGBA8Unorm_sRGB, MTLDataTypeRenderPipeline,
    MTLDataTypeSampler, MTLDataTypeShort, MTLDataTypeShort2, MTLDataTypeShort3, MTLDataTypeShort4,
    MTLDataTypeStruct, MTLDataTypeTexture, MTLDataTypeUChar, MTLDataTypeUChar2, MTLDataTypeUChar3,
    MTLDataTypeUChar4, MTLDataTypeUInt, MTLDataTypeUInt2, MTLDataTypeUInt3, MTLDataTypeUInt4,
    MTLDataTypeULong, MTLDataTypeULong2, MTLDataTypeULong3, MTLDataTypeULong4, MTLDataTypeUShort,
    MTLDataTypeUShort2, MTLDataTypeUShort3, MTLDataTypeUShort4, MTLDataTypeVisibleFunctionTable,
};
pub use self::__MTLArgumentEncoder::MTLArgumentEncoder;
pub use self::__MTLBinaryArchive::MTLBinaryArchive;
#[cfg(feature = "Metal_MTLBinaryArchiveDescriptor")]
pub use self::__MTLBinaryArchive::MTLBinaryArchiveDescriptor;
pub use self::__MTLBinaryArchive::MTLBinaryArchiveDomain;
pub use self::__MTLBinaryArchive::MTLBinaryArchiveError;
pub use self::__MTLBinaryArchive::{
    MTLBinaryArchiveErrorCompilationFailure, MTLBinaryArchiveErrorInternalError,
    MTLBinaryArchiveErrorInvalidFile, MTLBinaryArchiveErrorNone,
    MTLBinaryArchiveErrorUnexpectedElement,
};
pub use self::__MTLBlitCommandEncoder::MTLBlitCommandEncoder;
pub use self::__MTLBlitCommandEncoder::MTLBlitOption;
pub use self::__MTLBlitCommandEncoder::{
    MTLBlitOptionDepthFromDepthStencil, MTLBlitOptionNone, MTLBlitOptionRowLinearPVRTC,
    MTLBlitOptionStencilFromDepthStencil,
};
#[cfg(feature = "Metal_MTLBlitPassDescriptor")]
pub use self::__MTLBlitPass::MTLBlitPassDescriptor;
#[cfg(feature = "Metal_MTLBlitPassSampleBufferAttachmentDescriptor")]
pub use self::__MTLBlitPass::MTLBlitPassSampleBufferAttachmentDescriptor;
#[cfg(feature = "Metal_MTLBlitPassSampleBufferAttachmentDescriptorArray")]
pub use self::__MTLBlitPass::MTLBlitPassSampleBufferAttachmentDescriptorArray;
pub use self::__MTLBuffer::MTLBuffer;
#[cfg(feature = "Metal_MTLCaptureDescriptor")]
pub use self::__MTLCaptureManager::MTLCaptureDescriptor;
pub use self::__MTLCaptureManager::MTLCaptureDestination;
pub use self::__MTLCaptureManager::MTLCaptureError;
pub use self::__MTLCaptureManager::MTLCaptureErrorDomain;
#[cfg(feature = "Metal_MTLCaptureManager")]
pub use self::__MTLCaptureManager::MTLCaptureManager;
pub use self::__MTLCaptureManager::{
    MTLCaptureDestinationDeveloperTools, MTLCaptureDestinationGPUTraceDocument,
};
pub use self::__MTLCaptureManager::{
    MTLCaptureErrorAlreadyCapturing, MTLCaptureErrorInvalidDescriptor, MTLCaptureErrorNotSupported,
};
pub use self::__MTLCaptureScope::MTLCaptureScope;
pub use self::__MTLCommandBuffer::MTLCommandBuffer;
#[cfg(feature = "Metal_MTLCommandBufferDescriptor")]
pub use self::__MTLCommandBuffer::MTLCommandBufferDescriptor;
pub use self::__MTLCommandBuffer::MTLCommandBufferEncoderInfo;
pub use self::__MTLCommandBuffer::MTLCommandBufferEncoderInfoErrorKey;
pub use self::__MTLCommandBuffer::MTLCommandBufferError;
pub use self::__MTLCommandBuffer::MTLCommandBufferErrorDomain;
pub use self::__MTLCommandBuffer::MTLCommandBufferErrorOption;
pub use self::__MTLCommandBuffer::MTLCommandBufferHandler;
pub use self::__MTLCommandBuffer::MTLCommandBufferStatus;
pub use self::__MTLCommandBuffer::MTLCommandEncoderErrorState;
pub use self::__MTLCommandBuffer::MTLDispatchType;
pub use self::__MTLCommandBuffer::{
    MTLCommandBufferErrorAccessRevoked, MTLCommandBufferErrorBlacklisted,
    MTLCommandBufferErrorDeviceRemoved, MTLCommandBufferErrorInternal,
    MTLCommandBufferErrorInvalidResource, MTLCommandBufferErrorMemoryless,
    MTLCommandBufferErrorNone, MTLCommandBufferErrorNotPermitted, MTLCommandBufferErrorOutOfMemory,
    MTLCommandBufferErrorPageFault, MTLCommandBufferErrorStackOverflow,
    MTLCommandBufferErrorTimeout,
};
pub use self::__MTLCommandBuffer::{
    MTLCommandBufferErrorOptionEncoderExecutionStatus, MTLCommandBufferErrorOptionNone,
};
pub use self::__MTLCommandBuffer::{
    MTLCommandBufferStatusCommitted, MTLCommandBufferStatusCompleted,
    MTLCommandBufferStatusEnqueued, MTLCommandBufferStatusError, MTLCommandBufferStatusNotEnqueued,
    MTLCommandBufferStatusScheduled,
};
pub use self::__MTLCommandBuffer::{
    MTLCommandEncoderErrorStateAffected, MTLCommandEncoderErrorStateCompleted,
    MTLCommandEncoderErrorStateFaulted, MTLCommandEncoderErrorStatePending,
    MTLCommandEncoderErrorStateUnknown,
};
pub use self::__MTLCommandBuffer::{MTLDispatchTypeConcurrent, MTLDispatchTypeSerial};
pub use self::__MTLCommandEncoder::MTLBarrierScope;
pub use self::__MTLCommandEncoder::MTLCommandEncoder;
pub use self::__MTLCommandEncoder::MTLResourceUsage;
pub use self::__MTLCommandEncoder::{
    MTLBarrierScopeBuffers, MTLBarrierScopeRenderTargets, MTLBarrierScopeTextures,
};
pub use self::__MTLCommandEncoder::{
    MTLResourceUsageRead, MTLResourceUsageSample, MTLResourceUsageWrite,
};
pub use self::__MTLCommandQueue::MTLCommandQueue;
pub use self::__MTLComputeCommandEncoder::MTLComputeCommandEncoder;
pub use self::__MTLComputeCommandEncoder::MTLDispatchThreadgroupsIndirectArguments;
pub use self::__MTLComputeCommandEncoder::MTLStageInRegionIndirectArguments;
#[cfg(feature = "Metal_MTLComputePassDescriptor")]
pub use self::__MTLComputePass::MTLComputePassDescriptor;
#[cfg(feature = "Metal_MTLComputePassSampleBufferAttachmentDescriptor")]
pub use self::__MTLComputePass::MTLComputePassSampleBufferAttachmentDescriptor;
#[cfg(feature = "Metal_MTLComputePassSampleBufferAttachmentDescriptorArray")]
pub use self::__MTLComputePass::MTLComputePassSampleBufferAttachmentDescriptorArray;
#[cfg(feature = "Metal_MTLComputePipelineDescriptor")]
pub use self::__MTLComputePipeline::MTLComputePipelineDescriptor;
#[cfg(feature = "Metal_MTLComputePipelineReflection")]
pub use self::__MTLComputePipeline::MTLComputePipelineReflection;
pub use self::__MTLComputePipeline::MTLComputePipelineState;
pub use self::__MTLCounters::MTLCommonCounter;
pub use self::__MTLCounters::MTLCommonCounterClipperInvocations;
pub use self::__MTLCounters::MTLCommonCounterClipperPrimitivesOut;
pub use self::__MTLCounters::MTLCommonCounterComputeKernelInvocations;
pub use self::__MTLCounters::MTLCommonCounterFragmentCycles;
pub use self::__MTLCounters::MTLCommonCounterFragmentInvocations;
pub use self::__MTLCounters::MTLCommonCounterFragmentsPassed;
pub use self::__MTLCounters::MTLCommonCounterPostTessellationVertexCycles;
pub use self::__MTLCounters::MTLCommonCounterPostTessellationVertexInvocations;
pub use self::__MTLCounters::MTLCommonCounterRenderTargetWriteCycles;
pub use self::__MTLCounters::MTLCommonCounterSet;
pub use self::__MTLCounters::MTLCommonCounterSetStageUtilization;
pub use self::__MTLCounters::MTLCommonCounterSetStatistic;
pub use self::__MTLCounters::MTLCommonCounterSetTimestamp;
pub use self::__MTLCounters::MTLCommonCounterTessellationCycles;
pub use self::__MTLCounters::MTLCommonCounterTessellationInputPatches;
pub use self::__MTLCounters::MTLCommonCounterTimestamp;
pub use self::__MTLCounters::MTLCommonCounterTotalCycles;
pub use self::__MTLCounters::MTLCommonCounterVertexCycles;
pub use self::__MTLCounters::MTLCommonCounterVertexInvocations;
pub use self::__MTLCounters::MTLCounter;
pub use self::__MTLCounters::MTLCounterErrorDomain;
pub use self::__MTLCounters::MTLCounterResultStageUtilization;
pub use self::__MTLCounters::MTLCounterResultStatistic;
pub use self::__MTLCounters::MTLCounterResultTimestamp;
pub use self::__MTLCounters::MTLCounterSampleBuffer;
#[cfg(feature = "Metal_MTLCounterSampleBufferDescriptor")]
pub use self::__MTLCounters::MTLCounterSampleBufferDescriptor;
pub use self::__MTLCounters::MTLCounterSampleBufferError;
pub use self::__MTLCounters::MTLCounterSet;
pub use self::__MTLCounters::{
    MTLCounterSampleBufferErrorInternal, MTLCounterSampleBufferErrorInvalid,
    MTLCounterSampleBufferErrorOutOfMemory,
};
pub use self::__MTLDepthStencil::MTLCompareFunction;
#[cfg(feature = "Metal_MTLDepthStencilDescriptor")]
pub use self::__MTLDepthStencil::MTLDepthStencilDescriptor;
pub use self::__MTLDepthStencil::MTLDepthStencilState;
#[cfg(feature = "Metal_MTLStencilDescriptor")]
pub use self::__MTLDepthStencil::MTLStencilDescriptor;
pub use self::__MTLDepthStencil::MTLStencilOperation;
pub use self::__MTLDepthStencil::{
    MTLCompareFunctionAlways, MTLCompareFunctionEqual, MTLCompareFunctionGreater,
    MTLCompareFunctionGreaterEqual, MTLCompareFunctionLess, MTLCompareFunctionLessEqual,
    MTLCompareFunctionNever, MTLCompareFunctionNotEqual,
};
pub use self::__MTLDepthStencil::{
    MTLStencilOperationDecrementClamp, MTLStencilOperationDecrementWrap,
    MTLStencilOperationIncrementClamp, MTLStencilOperationIncrementWrap, MTLStencilOperationInvert,
    MTLStencilOperationKeep, MTLStencilOperationReplace, MTLStencilOperationZero,
};
pub use self::__MTLDevice::MTLAccelerationStructureSizes;
#[cfg(feature = "Metal_MTLArchitecture")]
pub use self::__MTLDevice::MTLArchitecture;
pub use self::__MTLDevice::MTLArgumentBuffersTier;
#[cfg(feature = "Metal_MTLArgumentDescriptor")]
pub use self::__MTLDevice::MTLArgumentDescriptor;
#[cfg(feature = "Foundation_NSArray")]
pub use self::__MTLDevice::MTLCopyAllDevices;
pub use self::__MTLDevice::MTLCounterSamplingPoint;
pub use self::__MTLDevice::MTLCreateSystemDefaultDevice;
pub use self::__MTLDevice::MTLDevice;
pub use self::__MTLDevice::MTLDeviceLocation;
pub use self::__MTLDevice::MTLDeviceNotificationHandler;
pub use self::__MTLDevice::MTLDeviceNotificationName;
pub use self::__MTLDevice::MTLDeviceRemovalRequestedNotification;
pub use self::__MTLDevice::MTLDeviceWasAddedNotification;
pub use self::__MTLDevice::MTLDeviceWasRemovedNotification;
pub use self::__MTLDevice::MTLFeatureSet;
pub use self::__MTLDevice::MTLGPUFamily;
pub use self::__MTLDevice::MTLIOCompressionMethod;
pub use self::__MTLDevice::MTLNewComputePipelineStateCompletionHandler;
pub use self::__MTLDevice::MTLNewComputePipelineStateWithReflectionCompletionHandler;
pub use self::__MTLDevice::MTLNewLibraryCompletionHandler;
pub use self::__MTLDevice::MTLNewRenderPipelineStateCompletionHandler;
pub use self::__MTLDevice::MTLNewRenderPipelineStateWithReflectionCompletionHandler;
pub use self::__MTLDevice::MTLPipelineOption;
pub use self::__MTLDevice::MTLReadWriteTextureTier;
pub use self::__MTLDevice::MTLRemoveDeviceObserver;
pub use self::__MTLDevice::MTLSizeAndAlign;
pub use self::__MTLDevice::MTLSparsePageSize;
pub use self::__MTLDevice::MTLSparseTextureRegionAlignmentMode;
pub use self::__MTLDevice::MTLTimestamp;
pub use self::__MTLDevice::{MTLArgumentBuffersTier1, MTLArgumentBuffersTier2};
pub use self::__MTLDevice::{
    MTLCounterSamplingPointAtBlitBoundary, MTLCounterSamplingPointAtDispatchBoundary,
    MTLCounterSamplingPointAtDrawBoundary, MTLCounterSamplingPointAtStageBoundary,
    MTLCounterSamplingPointAtTileDispatchBoundary,
};
pub use self::__MTLDevice::{
    MTLDeviceLocationBuiltIn, MTLDeviceLocationExternal, MTLDeviceLocationSlot,
    MTLDeviceLocationUnspecified,
};
pub use self::__MTLDevice::{
    MTLFeatureSet_OSX_GPUFamily1_v1, MTLFeatureSet_OSX_GPUFamily1_v2,
    MTLFeatureSet_OSX_ReadWriteTextureTier2, MTLFeatureSet_TVOS_GPUFamily1_v1,
    MTLFeatureSet_iOS_GPUFamily1_v1, MTLFeatureSet_iOS_GPUFamily1_v2,
    MTLFeatureSet_iOS_GPUFamily1_v3, MTLFeatureSet_iOS_GPUFamily1_v4,
    MTLFeatureSet_iOS_GPUFamily1_v5, MTLFeatureSet_iOS_GPUFamily2_v1,
    MTLFeatureSet_iOS_GPUFamily2_v2, MTLFeatureSet_iOS_GPUFamily2_v3,
    MTLFeatureSet_iOS_GPUFamily2_v4, MTLFeatureSet_iOS_GPUFamily2_v5,
    MTLFeatureSet_iOS_GPUFamily3_v1, MTLFeatureSet_iOS_GPUFamily3_v2,
    MTLFeatureSet_iOS_GPUFamily3_v3, MTLFeatureSet_iOS_GPUFamily3_v4,
    MTLFeatureSet_iOS_GPUFamily4_v1, MTLFeatureSet_iOS_GPUFamily4_v2,
    MTLFeatureSet_iOS_GPUFamily5_v1, MTLFeatureSet_macOS_GPUFamily1_v1,
    MTLFeatureSet_macOS_GPUFamily1_v2, MTLFeatureSet_macOS_GPUFamily1_v3,
    MTLFeatureSet_macOS_GPUFamily1_v4, MTLFeatureSet_macOS_GPUFamily2_v1,
    MTLFeatureSet_macOS_ReadWriteTextureTier2, MTLFeatureSet_tvOS_GPUFamily1_v1,
    MTLFeatureSet_tvOS_GPUFamily1_v2, MTLFeatureSet_tvOS_GPUFamily1_v3,
    MTLFeatureSet_tvOS_GPUFamily1_v4, MTLFeatureSet_tvOS_GPUFamily2_v1,
    MTLFeatureSet_tvOS_GPUFamily2_v2,
};
pub use self::__MTLDevice::{
    MTLGPUFamilyApple1, MTLGPUFamilyApple2, MTLGPUFamilyApple3, MTLGPUFamilyApple4,
    MTLGPUFamilyApple5, MTLGPUFamilyApple6, MTLGPUFamilyApple7, MTLGPUFamilyApple8,
    MTLGPUFamilyApple9, MTLGPUFamilyCommon1, MTLGPUFamilyCommon2, MTLGPUFamilyCommon3,
    MTLGPUFamilyMac1, MTLGPUFamilyMac2, MTLGPUFamilyMacCatalyst1, MTLGPUFamilyMacCatalyst2,
    MTLGPUFamilyMetal3,
};
pub use self::__MTLDevice::{
    MTLIOCompressionMethodLZ4, MTLIOCompressionMethodLZBitmap, MTLIOCompressionMethodLZFSE,
    MTLIOCompressionMethodLZMA, MTLIOCompressionMethodZlib,
};
pub use self::__MTLDevice::{
    MTLPipelineOptionArgumentInfo, MTLPipelineOptionBufferTypeInfo,
    MTLPipelineOptionFailOnBinaryArchiveMiss, MTLPipelineOptionNone,
};
pub use self::__MTLDevice::{
    MTLReadWriteTextureTier1, MTLReadWriteTextureTier2, MTLReadWriteTextureTierNone,
};
pub use self::__MTLDevice::{MTLSparsePageSize16, MTLSparsePageSize256, MTLSparsePageSize64};
pub use self::__MTLDevice::{
    MTLSparseTextureRegionAlignmentModeInward, MTLSparseTextureRegionAlignmentModeOutward,
};
pub use self::__MTLDrawable::MTLDrawable;
pub use self::__MTLDrawable::MTLDrawablePresentedHandler;
pub use self::__MTLDynamicLibrary::MTLDynamicLibrary;
pub use self::__MTLDynamicLibrary::MTLDynamicLibraryDomain;
pub use self::__MTLDynamicLibrary::MTLDynamicLibraryError;
pub use self::__MTLDynamicLibrary::{
    MTLDynamicLibraryErrorCompilationFailure, MTLDynamicLibraryErrorDependencyLoadFailure,
    MTLDynamicLibraryErrorInvalidFile, MTLDynamicLibraryErrorNone,
    MTLDynamicLibraryErrorUnresolvedInstallName, MTLDynamicLibraryErrorUnsupported,
};
pub use self::__MTLEvent::MTLEvent;
pub use self::__MTLEvent::MTLSharedEvent;
#[cfg(feature = "Metal_MTLSharedEventHandle")]
pub use self::__MTLEvent::MTLSharedEventHandle;
#[cfg(feature = "Metal_MTLSharedEventListener")]
pub use self::__MTLEvent::MTLSharedEventListener;
pub use self::__MTLEvent::MTLSharedEventNotificationBlock;
pub use self::__MTLFence::MTLFence;
#[cfg(feature = "Metal_MTLFunctionConstantValues")]
pub use self::__MTLFunctionConstantValues::MTLFunctionConstantValues;
#[cfg(feature = "Metal_MTLFunctionDescriptor")]
pub use self::__MTLFunctionDescriptor::MTLFunctionDescriptor;
pub use self::__MTLFunctionDescriptor::MTLFunctionOptions;
#[cfg(feature = "Metal_MTLIntersectionFunctionDescriptor")]
pub use self::__MTLFunctionDescriptor::MTLIntersectionFunctionDescriptor;
pub use self::__MTLFunctionDescriptor::{
    MTLFunctionOptionCompileToBinary, MTLFunctionOptionNone,
    MTLFunctionOptionStoreFunctionInMetalScript,
};
pub use self::__MTLFunctionHandle::MTLFunctionHandle;
pub use self::__MTLFunctionLog::MTLFunctionLog;
pub use self::__MTLFunctionLog::MTLFunctionLogDebugLocation;
pub use self::__MTLFunctionLog::MTLFunctionLogType;
pub use self::__MTLFunctionLog::MTLFunctionLogTypeValidation;
pub use self::__MTLFunctionLog::MTLLogContainer;
pub use self::__MTLFunctionStitching::MTLFunctionStitchingAttribute;
#[cfg(feature = "Metal_MTLFunctionStitchingAttributeAlwaysInline")]
pub use self::__MTLFunctionStitching::MTLFunctionStitchingAttributeAlwaysInline;
#[cfg(feature = "Metal_MTLFunctionStitchingFunctionNode")]
pub use self::__MTLFunctionStitching::MTLFunctionStitchingFunctionNode;
#[cfg(feature = "Metal_MTLFunctionStitchingGraph")]
pub use self::__MTLFunctionStitching::MTLFunctionStitchingGraph;
#[cfg(feature = "Metal_MTLFunctionStitchingInputNode")]
pub use self::__MTLFunctionStitching::MTLFunctionStitchingInputNode;
pub use self::__MTLFunctionStitching::MTLFunctionStitchingNode;
#[cfg(feature = "Metal_MTLStitchedLibraryDescriptor")]
pub use self::__MTLFunctionStitching::MTLStitchedLibraryDescriptor;
pub use self::__MTLHeap::MTLHeap;
#[cfg(feature = "Metal_MTLHeapDescriptor")]
pub use self::__MTLHeap::MTLHeapDescriptor;
pub use self::__MTLHeap::MTLHeapType;
pub use self::__MTLHeap::{MTLHeapTypeAutomatic, MTLHeapTypePlacement, MTLHeapTypeSparse};
pub use self::__MTLIOCommandBuffer::MTLIOCommandBuffer;
pub use self::__MTLIOCommandBuffer::MTLIOCommandBufferHandler;
pub use self::__MTLIOCommandBuffer::MTLIOStatus;
pub use self::__MTLIOCommandBuffer::{
    MTLIOStatusCancelled, MTLIOStatusComplete, MTLIOStatusError, MTLIOStatusPending,
};
pub use self::__MTLIOCommandQueue::MTLIOCommandQueue;
#[cfg(feature = "Metal_MTLIOCommandQueueDescriptor")]
pub use self::__MTLIOCommandQueue::MTLIOCommandQueueDescriptor;
pub use self::__MTLIOCommandQueue::MTLIOCommandQueueType;
pub use self::__MTLIOCommandQueue::MTLIOError;
pub use self::__MTLIOCommandQueue::MTLIOErrorDomain;
pub use self::__MTLIOCommandQueue::MTLIOFileHandle;
pub use self::__MTLIOCommandQueue::MTLIOPriority;
pub use self::__MTLIOCommandQueue::MTLIOScratchBuffer;
pub use self::__MTLIOCommandQueue::MTLIOScratchBufferAllocator;
pub use self::__MTLIOCommandQueue::{MTLIOCommandQueueTypeConcurrent, MTLIOCommandQueueTypeSerial};
pub use self::__MTLIOCommandQueue::{MTLIOErrorInternal, MTLIOErrorURLInvalid};
pub use self::__MTLIOCommandQueue::{MTLIOPriorityHigh, MTLIOPriorityLow, MTLIOPriorityNormal};
pub use self::__MTLIOCompressor::MTLIOCompressionContext;
pub use self::__MTLIOCompressor::MTLIOCompressionContextAppendData;
pub use self::__MTLIOCompressor::MTLIOCompressionContextDefaultChunkSize;
pub use self::__MTLIOCompressor::MTLIOCompressionStatus;
pub use self::__MTLIOCompressor::MTLIOCreateCompressionContext;
pub use self::__MTLIOCompressor::MTLIOFlushAndDestroyCompressionContext;
pub use self::__MTLIOCompressor::{MTLIOCompressionStatusComplete, MTLIOCompressionStatusError};
pub use self::__MTLIndirectCommandBuffer::MTLIndirectCommandBuffer;
#[cfg(feature = "Metal_MTLIndirectCommandBufferDescriptor")]
pub use self::__MTLIndirectCommandBuffer::MTLIndirectCommandBufferDescriptor;
pub use self::__MTLIndirectCommandBuffer::MTLIndirectCommandBufferExecutionRange;
pub use self::__MTLIndirectCommandBuffer::MTLIndirectCommandType;
pub use self::__MTLIndirectCommandBuffer::{
    MTLIndirectCommandTypeConcurrentDispatch, MTLIndirectCommandTypeConcurrentDispatchThreads,
    MTLIndirectCommandTypeDraw, MTLIndirectCommandTypeDrawIndexed,
    MTLIndirectCommandTypeDrawIndexedPatches, MTLIndirectCommandTypeDrawPatches,
};
pub use self::__MTLIndirectCommandEncoder::MTLIndirectComputeCommand;
pub use self::__MTLIndirectCommandEncoder::MTLIndirectRenderCommand;
pub use self::__MTLIntersectionFunctionTable::MTLIntersectionFunctionSignature;
pub use self::__MTLIntersectionFunctionTable::MTLIntersectionFunctionTable;
#[cfg(feature = "Metal_MTLIntersectionFunctionTableDescriptor")]
pub use self::__MTLIntersectionFunctionTable::MTLIntersectionFunctionTableDescriptor;
pub use self::__MTLIntersectionFunctionTable::{
    MTLIntersectionFunctionSignatureCurveData, MTLIntersectionFunctionSignatureExtendedLimits,
    MTLIntersectionFunctionSignatureInstanceMotion, MTLIntersectionFunctionSignatureInstancing,
    MTLIntersectionFunctionSignatureMaxLevels, MTLIntersectionFunctionSignatureNone,
    MTLIntersectionFunctionSignaturePrimitiveMotion, MTLIntersectionFunctionSignatureTriangleData,
    MTLIntersectionFunctionSignatureWorldSpaceData,
};
#[cfg(feature = "Metal_MTLAttribute")]
pub use self::__MTLLibrary::MTLAttribute;
#[cfg(feature = "Metal_MTLCompileOptions")]
pub use self::__MTLLibrary::MTLCompileOptions;
pub use self::__MTLLibrary::MTLCompileSymbolVisibility;
pub use self::__MTLLibrary::MTLFunction;
#[cfg(feature = "Metal_MTLFunctionConstant")]
pub use self::__MTLLibrary::MTLFunctionConstant;
pub use self::__MTLLibrary::MTLFunctionType;
pub use self::__MTLLibrary::MTLLanguageVersion;
pub use self::__MTLLibrary::MTLLibrary;
pub use self::__MTLLibrary::MTLLibraryError;
pub use self::__MTLLibrary::MTLLibraryErrorDomain;
pub use self::__MTLLibrary::MTLLibraryOptimizationLevel;
pub use self::__MTLLibrary::MTLLibraryType;
pub use self::__MTLLibrary::MTLPatchType;
#[cfg(feature = "Metal_MTLVertexAttribute")]
pub use self::__MTLLibrary::MTLVertexAttribute;
pub use self::__MTLLibrary::{MTLCompileSymbolVisibilityDefault, MTLCompileSymbolVisibilityHidden};
pub use self::__MTLLibrary::{
    MTLFunctionTypeFragment, MTLFunctionTypeIntersection, MTLFunctionTypeKernel,
    MTLFunctionTypeMesh, MTLFunctionTypeObject, MTLFunctionTypeVertex, MTLFunctionTypeVisible,
};
pub use self::__MTLLibrary::{
    MTLLanguageVersion1_0, MTLLanguageVersion1_1, MTLLanguageVersion1_2, MTLLanguageVersion2_0,
    MTLLanguageVersion2_1, MTLLanguageVersion2_2, MTLLanguageVersion2_3, MTLLanguageVersion2_4,
    MTLLanguageVersion3_0, MTLLanguageVersion3_1,
};
pub use self::__MTLLibrary::{
    MTLLibraryErrorCompileFailure, MTLLibraryErrorCompileWarning, MTLLibraryErrorFileNotFound,
    MTLLibraryErrorFunctionNotFound, MTLLibraryErrorInternal, MTLLibraryErrorUnsupported,
};
pub use self::__MTLLibrary::{MTLLibraryOptimizationLevelDefault, MTLLibraryOptimizationLevelSize};
pub use self::__MTLLibrary::{MTLLibraryTypeDynamic, MTLLibraryTypeExecutable};
pub use self::__MTLLibrary::{MTLPatchTypeNone, MTLPatchTypeQuad, MTLPatchTypeTriangle};
#[cfg(feature = "Metal_MTLLinkedFunctions")]
pub use self::__MTLLinkedFunctions::MTLLinkedFunctions;
pub use self::__MTLParallelRenderCommandEncoder::MTLParallelRenderCommandEncoder;
pub use self::__MTLPipeline::MTLMutability;
#[cfg(feature = "Metal_MTLPipelineBufferDescriptor")]
pub use self::__MTLPipeline::MTLPipelineBufferDescriptor;
#[cfg(feature = "Metal_MTLPipelineBufferDescriptorArray")]
pub use self::__MTLPipeline::MTLPipelineBufferDescriptorArray;
pub use self::__MTLPipeline::{MTLMutabilityDefault, MTLMutabilityImmutable, MTLMutabilityMutable};
pub use self::__MTLPixelFormat::MTLPixelFormat;
pub use self::__MTLPixelFormat::{
    MTLPixelFormatA1BGR5Unorm, MTLPixelFormatA8Unorm, MTLPixelFormatABGR4Unorm,
    MTLPixelFormatASTC_10x10_HDR, MTLPixelFormatASTC_10x10_LDR, MTLPixelFormatASTC_10x10_sRGB,
    MTLPixelFormatASTC_10x5_HDR, MTLPixelFormatASTC_10x5_LDR, MTLPixelFormatASTC_10x5_sRGB,
    MTLPixelFormatASTC_10x6_HDR, MTLPixelFormatASTC_10x6_LDR, MTLPixelFormatASTC_10x6_sRGB,
    MTLPixelFormatASTC_10x8_HDR, MTLPixelFormatASTC_10x8_LDR, MTLPixelFormatASTC_10x8_sRGB,
    MTLPixelFormatASTC_12x10_HDR, MTLPixelFormatASTC_12x10_LDR, MTLPixelFormatASTC_12x10_sRGB,
    MTLPixelFormatASTC_12x12_HDR, MTLPixelFormatASTC_12x12_LDR, MTLPixelFormatASTC_12x12_sRGB,
    MTLPixelFormatASTC_4x4_HDR, MTLPixelFormatASTC_4x4_LDR, MTLPixelFormatASTC_4x4_sRGB,
    MTLPixelFormatASTC_5x4_HDR, MTLPixelFormatASTC_5x4_LDR, MTLPixelFormatASTC_5x4_sRGB,
    MTLPixelFormatASTC_5x5_HDR, MTLPixelFormatASTC_5x5_LDR, MTLPixelFormatASTC_5x5_sRGB,
    MTLPixelFormatASTC_6x5_HDR, MTLPixelFormatASTC_6x5_LDR, MTLPixelFormatASTC_6x5_sRGB,
    MTLPixelFormatASTC_6x6_HDR, MTLPixelFormatASTC_6x6_LDR, MTLPixelFormatASTC_6x6_sRGB,
    MTLPixelFormatASTC_8x5_HDR, MTLPixelFormatASTC_8x5_LDR, MTLPixelFormatASTC_8x5_sRGB,
    MTLPixelFormatASTC_8x6_HDR, MTLPixelFormatASTC_8x6_LDR, MTLPixelFormatASTC_8x6_sRGB,
    MTLPixelFormatASTC_8x8_HDR, MTLPixelFormatASTC_8x8_LDR, MTLPixelFormatASTC_8x8_sRGB,
    MTLPixelFormatB5G6R5Unorm, MTLPixelFormatBC1_RGBA, MTLPixelFormatBC1_RGBA_sRGB,
    MTLPixelFormatBC2_RGBA, MTLPixelFormatBC2_RGBA_sRGB, MTLPixelFormatBC3_RGBA,
    MTLPixelFormatBC3_RGBA_sRGB, MTLPixelFormatBC4_RSnorm, MTLPixelFormatBC4_RUnorm,
    MTLPixelFormatBC5_RGSnorm, MTLPixelFormatBC5_RGUnorm, MTLPixelFormatBC6H_RGBFloat,
    MTLPixelFormatBC6H_RGBUfloat, MTLPixelFormatBC7_RGBAUnorm, MTLPixelFormatBC7_RGBAUnorm_sRGB,
    MTLPixelFormatBGR10A2Unorm, MTLPixelFormatBGR10_XR, MTLPixelFormatBGR10_XR_sRGB,
    MTLPixelFormatBGR5A1Unorm, MTLPixelFormatBGRA10_XR, MTLPixelFormatBGRA10_XR_sRGB,
    MTLPixelFormatBGRA8Unorm, MTLPixelFormatBGRA8Unorm_sRGB, MTLPixelFormatBGRG422,
    MTLPixelFormatDepth16Unorm, MTLPixelFormatDepth24Unorm_Stencil8, MTLPixelFormatDepth32Float,
    MTLPixelFormatDepth32Float_Stencil8, MTLPixelFormatEAC_R11Snorm, MTLPixelFormatEAC_R11Unorm,
    MTLPixelFormatEAC_RG11Snorm, MTLPixelFormatEAC_RG11Unorm, MTLPixelFormatEAC_RGBA8,
    MTLPixelFormatEAC_RGBA8_sRGB, MTLPixelFormatETC2_RGB8, MTLPixelFormatETC2_RGB8A1,
    MTLPixelFormatETC2_RGB8A1_sRGB, MTLPixelFormatETC2_RGB8_sRGB, MTLPixelFormatGBGR422,
    MTLPixelFormatInvalid, MTLPixelFormatPVRTC_RGBA_2BPP, MTLPixelFormatPVRTC_RGBA_2BPP_sRGB,
    MTLPixelFormatPVRTC_RGBA_4BPP, MTLPixelFormatPVRTC_RGBA_4BPP_sRGB,
    MTLPixelFormatPVRTC_RGB_2BPP, MTLPixelFormatPVRTC_RGB_2BPP_sRGB, MTLPixelFormatPVRTC_RGB_4BPP,
    MTLPixelFormatPVRTC_RGB_4BPP_sRGB, MTLPixelFormatR16Float, MTLPixelFormatR16Sint,
    MTLPixelFormatR16Snorm, MTLPixelFormatR16Uint, MTLPixelFormatR16Unorm, MTLPixelFormatR32Float,
    MTLPixelFormatR32Sint, MTLPixelFormatR32Uint, MTLPixelFormatR8Sint, MTLPixelFormatR8Snorm,
    MTLPixelFormatR8Uint, MTLPixelFormatR8Unorm, MTLPixelFormatR8Unorm_sRGB,
    MTLPixelFormatRG11B10Float, MTLPixelFormatRG16Float, MTLPixelFormatRG16Sint,
    MTLPixelFormatRG16Snorm, MTLPixelFormatRG16Uint, MTLPixelFormatRG16Unorm,
    MTLPixelFormatRG32Float, MTLPixelFormatRG32Sint, MTLPixelFormatRG32Uint, MTLPixelFormatRG8Sint,
    MTLPixelFormatRG8Snorm, MTLPixelFormatRG8Uint, MTLPixelFormatRG8Unorm,
    MTLPixelFormatRG8Unorm_sRGB, MTLPixelFormatRGB10A2Uint, MTLPixelFormatRGB10A2Unorm,
    MTLPixelFormatRGB9E5Float, MTLPixelFormatRGBA16Float, MTLPixelFormatRGBA16Sint,
    MTLPixelFormatRGBA16Snorm, MTLPixelFormatRGBA16Uint, MTLPixelFormatRGBA16Unorm,
    MTLPixelFormatRGBA32Float, MTLPixelFormatRGBA32Sint, MTLPixelFormatRGBA32Uint,
    MTLPixelFormatRGBA8Sint, MTLPixelFormatRGBA8Snorm, MTLPixelFormatRGBA8Uint,
    MTLPixelFormatRGBA8Unorm, MTLPixelFormatRGBA8Unorm_sRGB, MTLPixelFormatStencil8,
    MTLPixelFormatX24_Stencil8, MTLPixelFormatX32_Stencil8,
};
#[cfg(feature = "Metal_MTLRasterizationRateLayerArray")]
pub use self::__MTLRasterizationRate::MTLRasterizationRateLayerArray;
#[cfg(feature = "Metal_MTLRasterizationRateLayerDescriptor")]
pub use self::__MTLRasterizationRate::MTLRasterizationRateLayerDescriptor;
pub use self::__MTLRasterizationRate::MTLRasterizationRateMap;
#[cfg(feature = "Metal_MTLRasterizationRateMapDescriptor")]
pub use self::__MTLRasterizationRate::MTLRasterizationRateMapDescriptor;
#[cfg(feature = "Metal_MTLRasterizationRateSampleArray")]
pub use self::__MTLRasterizationRate::MTLRasterizationRateSampleArray;
pub use self::__MTLRenderCommandEncoder::MTLCullMode;
pub use self::__MTLRenderCommandEncoder::MTLDepthClipMode;
pub use self::__MTLRenderCommandEncoder::MTLDrawIndexedPrimitivesIndirectArguments;
pub use self::__MTLRenderCommandEncoder::MTLDrawPatchIndirectArguments;
pub use self::__MTLRenderCommandEncoder::MTLDrawPrimitivesIndirectArguments;
pub use self::__MTLRenderCommandEncoder::MTLPrimitiveType;
pub use self::__MTLRenderCommandEncoder::MTLQuadTessellationFactorsHalf;
pub use self::__MTLRenderCommandEncoder::MTLRenderCommandEncoder;
pub use self::__MTLRenderCommandEncoder::MTLRenderStages;
pub use self::__MTLRenderCommandEncoder::MTLScissorRect;
pub use self::__MTLRenderCommandEncoder::MTLTriangleFillMode;
pub use self::__MTLRenderCommandEncoder::MTLTriangleTessellationFactorsHalf;
pub use self::__MTLRenderCommandEncoder::MTLVertexAmplificationViewMapping;
pub use self::__MTLRenderCommandEncoder::MTLViewport;
pub use self::__MTLRenderCommandEncoder::MTLVisibilityResultMode;
pub use self::__MTLRenderCommandEncoder::MTLWinding;
pub use self::__MTLRenderCommandEncoder::{MTLCullModeBack, MTLCullModeFront, MTLCullModeNone};
pub use self::__MTLRenderCommandEncoder::{MTLDepthClipModeClamp, MTLDepthClipModeClip};
pub use self::__MTLRenderCommandEncoder::{
    MTLPrimitiveTypeLine, MTLPrimitiveTypeLineStrip, MTLPrimitiveTypePoint,
    MTLPrimitiveTypeTriangle, MTLPrimitiveTypeTriangleStrip,
};
pub use self::__MTLRenderCommandEncoder::{
    MTLRenderStageFragment, MTLRenderStageMesh, MTLRenderStageObject, MTLRenderStageTile,
    MTLRenderStageVertex,
};
pub use self::__MTLRenderCommandEncoder::{MTLTriangleFillModeFill, MTLTriangleFillModeLines};
pub use self::__MTLRenderCommandEncoder::{
    MTLVisibilityResultModeBoolean, MTLVisibilityResultModeCounting,
    MTLVisibilityResultModeDisabled,
};
pub use self::__MTLRenderCommandEncoder::{MTLWindingClockwise, MTLWindingCounterClockwise};
pub use self::__MTLRenderPass::MTLClearColor;
pub use self::__MTLRenderPass::MTLLoadAction;
pub use self::__MTLRenderPass::MTLMultisampleDepthResolveFilter;
pub use self::__MTLRenderPass::MTLMultisampleStencilResolveFilter;
#[cfg(feature = "Metal_MTLRenderPassAttachmentDescriptor")]
pub use self::__MTLRenderPass::MTLRenderPassAttachmentDescriptor;
#[cfg(feature = "Metal_MTLRenderPassColorAttachmentDescriptor")]
pub use self::__MTLRenderPass::MTLRenderPassColorAttachmentDescriptor;
#[cfg(feature = "Metal_MTLRenderPassColorAttachmentDescriptorArray")]
pub use self::__MTLRenderPass::MTLRenderPassColorAttachmentDescriptorArray;
#[cfg(feature = "Metal_MTLRenderPassDepthAttachmentDescriptor")]
pub use self::__MTLRenderPass::MTLRenderPassDepthAttachmentDescriptor;
#[cfg(feature = "Metal_MTLRenderPassDescriptor")]
pub use self::__MTLRenderPass::MTLRenderPassDescriptor;
#[cfg(feature = "Metal_MTLRenderPassSampleBufferAttachmentDescriptor")]
pub use self::__MTLRenderPass::MTLRenderPassSampleBufferAttachmentDescriptor;
#[cfg(feature = "Metal_MTLRenderPassSampleBufferAttachmentDescriptorArray")]
pub use self::__MTLRenderPass::MTLRenderPassSampleBufferAttachmentDescriptorArray;
#[cfg(feature = "Metal_MTLRenderPassStencilAttachmentDescriptor")]
pub use self::__MTLRenderPass::MTLRenderPassStencilAttachmentDescriptor;
pub use self::__MTLRenderPass::MTLStoreAction;
pub use self::__MTLRenderPass::MTLStoreActionOptions;
pub use self::__MTLRenderPass::{MTLLoadActionClear, MTLLoadActionDontCare, MTLLoadActionLoad};
pub use self::__MTLRenderPass::{
    MTLMultisampleDepthResolveFilterMax, MTLMultisampleDepthResolveFilterMin,
    MTLMultisampleDepthResolveFilterSample0,
};
pub use self::__MTLRenderPass::{
    MTLMultisampleStencilResolveFilterDepthResolvedSample,
    MTLMultisampleStencilResolveFilterSample0,
};
pub use self::__MTLRenderPass::{
    MTLStoreActionCustomSampleDepthStore, MTLStoreActionDontCare, MTLStoreActionMultisampleResolve,
    MTLStoreActionStore, MTLStoreActionStoreAndMultisampleResolve, MTLStoreActionUnknown,
};
pub use self::__MTLRenderPass::{
    MTLStoreActionOptionCustomSamplePositions, MTLStoreActionOptionNone,
};
pub use self::__MTLRenderPipeline::MTLBlendFactor;
pub use self::__MTLRenderPipeline::MTLBlendOperation;
pub use self::__MTLRenderPipeline::MTLColorWriteMask;
#[cfg(feature = "Metal_MTLMeshRenderPipelineDescriptor")]
pub use self::__MTLRenderPipeline::MTLMeshRenderPipelineDescriptor;
pub use self::__MTLRenderPipeline::MTLPrimitiveTopologyClass;
#[cfg(feature = "Metal_MTLRenderPipelineColorAttachmentDescriptor")]
pub use self::__MTLRenderPipeline::MTLRenderPipelineColorAttachmentDescriptor;
#[cfg(feature = "Metal_MTLRenderPipelineColorAttachmentDescriptorArray")]
pub use self::__MTLRenderPipeline::MTLRenderPipelineColorAttachmentDescriptorArray;
#[cfg(feature = "Metal_MTLRenderPipelineDescriptor")]
pub use self::__MTLRenderPipeline::MTLRenderPipelineDescriptor;
#[cfg(feature = "Metal_MTLRenderPipelineFunctionsDescriptor")]
pub use self::__MTLRenderPipeline::MTLRenderPipelineFunctionsDescriptor;
#[cfg(feature = "Metal_MTLRenderPipelineReflection")]
pub use self::__MTLRenderPipeline::MTLRenderPipelineReflection;
pub use self::__MTLRenderPipeline::MTLRenderPipelineState;
pub use self::__MTLRenderPipeline::MTLTessellationControlPointIndexType;
pub use self::__MTLRenderPipeline::MTLTessellationFactorFormat;
pub use self::__MTLRenderPipeline::MTLTessellationFactorFormatHalf;
pub use self::__MTLRenderPipeline::MTLTessellationFactorStepFunction;
pub use self::__MTLRenderPipeline::MTLTessellationPartitionMode;
#[cfg(feature = "Metal_MTLTileRenderPipelineColorAttachmentDescriptor")]
pub use self::__MTLRenderPipeline::MTLTileRenderPipelineColorAttachmentDescriptor;
#[cfg(feature = "Metal_MTLTileRenderPipelineColorAttachmentDescriptorArray")]
pub use self::__MTLRenderPipeline::MTLTileRenderPipelineColorAttachmentDescriptorArray;
#[cfg(feature = "Metal_MTLTileRenderPipelineDescriptor")]
pub use self::__MTLRenderPipeline::MTLTileRenderPipelineDescriptor;
pub use self::__MTLRenderPipeline::{
    MTLBlendFactorBlendAlpha, MTLBlendFactorBlendColor, MTLBlendFactorDestinationAlpha,
    MTLBlendFactorDestinationColor, MTLBlendFactorOne, MTLBlendFactorOneMinusBlendAlpha,
    MTLBlendFactorOneMinusBlendColor, MTLBlendFactorOneMinusDestinationAlpha,
    MTLBlendFactorOneMinusDestinationColor, MTLBlendFactorOneMinusSource1Alpha,
    MTLBlendFactorOneMinusSource1Color, MTLBlendFactorOneMinusSourceAlpha,
    MTLBlendFactorOneMinusSourceColor, MTLBlendFactorSource1Alpha, MTLBlendFactorSource1Color,
    MTLBlendFactorSourceAlpha, MTLBlendFactorSourceAlphaSaturated, MTLBlendFactorSourceColor,
    MTLBlendFactorZero,
};
pub use self::__MTLRenderPipeline::{
    MTLBlendOperationAdd, MTLBlendOperationMax, MTLBlendOperationMin,
    MTLBlendOperationReverseSubtract, MTLBlendOperationSubtract,
};
pub use self::__MTLRenderPipeline::{
    MTLColorWriteMaskAll, MTLColorWriteMaskAlpha, MTLColorWriteMaskBlue, MTLColorWriteMaskGreen,
    MTLColorWriteMaskNone, MTLColorWriteMaskRed,
};
pub use self::__MTLRenderPipeline::{
    MTLPrimitiveTopologyClassLine, MTLPrimitiveTopologyClassPoint,
    MTLPrimitiveTopologyClassTriangle, MTLPrimitiveTopologyClassUnspecified,
};
pub use self::__MTLRenderPipeline::{
    MTLTessellationControlPointIndexTypeNone, MTLTessellationControlPointIndexTypeUInt16,
    MTLTessellationControlPointIndexTypeUInt32,
};
pub use self::__MTLRenderPipeline::{
    MTLTessellationFactorStepFunctionConstant, MTLTessellationFactorStepFunctionPerInstance,
    MTLTessellationFactorStepFunctionPerPatch,
    MTLTessellationFactorStepFunctionPerPatchAndPerInstance,
};
pub use self::__MTLRenderPipeline::{
    MTLTessellationPartitionModeFractionalEven, MTLTessellationPartitionModeFractionalOdd,
    MTLTessellationPartitionModeInteger, MTLTessellationPartitionModePow2,
};
pub use self::__MTLResource::MTLCPUCacheMode;
pub use self::__MTLResource::MTLHazardTrackingMode;
pub use self::__MTLResource::MTLPurgeableState;
pub use self::__MTLResource::MTLResource;
pub use self::__MTLResource::MTLResourceOptions;
pub use self::__MTLResource::MTLStorageMode;
pub use self::__MTLResource::{MTLCPUCacheModeDefaultCache, MTLCPUCacheModeWriteCombined};
pub use self::__MTLResource::{
    MTLHazardTrackingModeDefault, MTLHazardTrackingModeTracked, MTLHazardTrackingModeUntracked,
};
pub use self::__MTLResource::{
    MTLPurgeableStateEmpty, MTLPurgeableStateKeepCurrent, MTLPurgeableStateNonVolatile,
    MTLPurgeableStateVolatile,
};
pub use self::__MTLResource::{
    MTLResourceCPUCacheModeDefaultCache, MTLResourceCPUCacheModeWriteCombined,
    MTLResourceHazardTrackingModeDefault, MTLResourceHazardTrackingModeTracked,
    MTLResourceHazardTrackingModeUntracked, MTLResourceOptionCPUCacheModeDefault,
    MTLResourceOptionCPUCacheModeWriteCombined, MTLResourceStorageModeManaged,
    MTLResourceStorageModeMemoryless, MTLResourceStorageModePrivate, MTLResourceStorageModeShared,
};
pub use self::__MTLResource::{
    MTLStorageModeManaged, MTLStorageModeMemoryless, MTLStorageModePrivate, MTLStorageModeShared,
};
pub use self::__MTLResourceStateCommandEncoder::MTLMapIndirectArguments;
pub use self::__MTLResourceStateCommandEncoder::MTLResourceStateCommandEncoder;
pub use self::__MTLResourceStateCommandEncoder::MTLSparseTextureMappingMode;
pub use self::__MTLResourceStateCommandEncoder::{
    MTLSparseTextureMappingModeMap, MTLSparseTextureMappingModeUnmap,
};
#[cfg(feature = "Metal_MTLResourceStatePassDescriptor")]
pub use self::__MTLResourceStatePass::MTLResourceStatePassDescriptor;
#[cfg(feature = "Metal_MTLResourceStatePassSampleBufferAttachmentDescriptor")]
pub use self::__MTLResourceStatePass::MTLResourceStatePassSampleBufferAttachmentDescriptor;
#[cfg(feature = "Metal_MTLResourceStatePassSampleBufferAttachmentDescriptorArray")]
pub use self::__MTLResourceStatePass::MTLResourceStatePassSampleBufferAttachmentDescriptorArray;
pub use self::__MTLSampler::MTLSamplerAddressMode;
pub use self::__MTLSampler::MTLSamplerBorderColor;
#[cfg(feature = "Metal_MTLSamplerDescriptor")]
pub use self::__MTLSampler::MTLSamplerDescriptor;
pub use self::__MTLSampler::MTLSamplerMinMagFilter;
pub use self::__MTLSampler::MTLSamplerMipFilter;
pub use self::__MTLSampler::MTLSamplerState;
pub use self::__MTLSampler::{
    MTLSamplerAddressModeClampToBorderColor, MTLSamplerAddressModeClampToEdge,
    MTLSamplerAddressModeClampToZero, MTLSamplerAddressModeMirrorClampToEdge,
    MTLSamplerAddressModeMirrorRepeat, MTLSamplerAddressModeRepeat,
};
pub use self::__MTLSampler::{
    MTLSamplerBorderColorOpaqueBlack, MTLSamplerBorderColorOpaqueWhite,
    MTLSamplerBorderColorTransparentBlack,
};
pub use self::__MTLSampler::{MTLSamplerMinMagFilterLinear, MTLSamplerMinMagFilterNearest};
pub use self::__MTLSampler::{
    MTLSamplerMipFilterLinear, MTLSamplerMipFilterNearest, MTLSamplerMipFilterNotMipmapped,
};
#[cfg(feature = "Metal_MTLAttributeDescriptor")]
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeDescriptor;
#[cfg(feature = "Metal_MTLAttributeDescriptorArray")]
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeDescriptorArray;
pub use self::__MTLStageInputOutputDescriptor::MTLAttributeFormat;
#[cfg(feature = "Metal_MTLBufferLayoutDescriptor")]
pub use self::__MTLStageInputOutputDescriptor::MTLBufferLayoutDescriptor;
#[cfg(feature = "Metal_MTLBufferLayoutDescriptorArray")]
pub use self::__MTLStageInputOutputDescriptor::MTLBufferLayoutDescriptorArray;
pub use self::__MTLStageInputOutputDescriptor::MTLIndexType;
#[cfg(feature = "Metal_MTLStageInputOutputDescriptor")]
pub use self::__MTLStageInputOutputDescriptor::MTLStageInputOutputDescriptor;
pub use self::__MTLStageInputOutputDescriptor::MTLStepFunction;
pub use self::__MTLStageInputOutputDescriptor::{
    MTLAttributeFormatChar, MTLAttributeFormatChar2, MTLAttributeFormatChar2Normalized,
    MTLAttributeFormatChar3, MTLAttributeFormatChar3Normalized, MTLAttributeFormatChar4,
    MTLAttributeFormatChar4Normalized, MTLAttributeFormatCharNormalized, MTLAttributeFormatFloat,
    MTLAttributeFormatFloat2, MTLAttributeFormatFloat3, MTLAttributeFormatFloat4,
    MTLAttributeFormatFloatRG11B10, MTLAttributeFormatFloatRGB9E5, MTLAttributeFormatHalf,
    MTLAttributeFormatHalf2, MTLAttributeFormatHalf3, MTLAttributeFormatHalf4,
    MTLAttributeFormatInt, MTLAttributeFormatInt1010102Normalized, MTLAttributeFormatInt2,
    MTLAttributeFormatInt3, MTLAttributeFormatInt4, MTLAttributeFormatInvalid,
    MTLAttributeFormatShort, MTLAttributeFormatShort2, MTLAttributeFormatShort2Normalized,
    MTLAttributeFormatShort3, MTLAttributeFormatShort3Normalized, MTLAttributeFormatShort4,
    MTLAttributeFormatShort4Normalized, MTLAttributeFormatShortNormalized, MTLAttributeFormatUChar,
    MTLAttributeFormatUChar2, MTLAttributeFormatUChar2Normalized, MTLAttributeFormatUChar3,
    MTLAttributeFormatUChar3Normalized, MTLAttributeFormatUChar4,
    MTLAttributeFormatUChar4Normalized, MTLAttributeFormatUChar4Normalized_BGRA,
    MTLAttributeFormatUCharNormalized, MTLAttributeFormatUInt,
    MTLAttributeFormatUInt1010102Normalized, MTLAttributeFormatUInt2, MTLAttributeFormatUInt3,
    MTLAttributeFormatUInt4, MTLAttributeFormatUShort, MTLAttributeFormatUShort2,
    MTLAttributeFormatUShort2Normalized, MTLAttributeFormatUShort3,
    MTLAttributeFormatUShort3Normalized, MTLAttributeFormatUShort4,
    MTLAttributeFormatUShort4Normalized, MTLAttributeFormatUShortNormalized,
};
pub use self::__MTLStageInputOutputDescriptor::{MTLIndexTypeUInt16, MTLIndexTypeUInt32};
pub use self::__MTLStageInputOutputDescriptor::{
    MTLStepFunctionConstant, MTLStepFunctionPerInstance, MTLStepFunctionPerPatch,
    MTLStepFunctionPerPatchControlPoint, MTLStepFunctionPerVertex,
    MTLStepFunctionThreadPositionInGridX, MTLStepFunctionThreadPositionInGridXIndexed,
    MTLStepFunctionThreadPositionInGridY, MTLStepFunctionThreadPositionInGridYIndexed,
};
#[cfg(feature = "Metal_MTLSharedTextureHandle")]
pub use self::__MTLTexture::MTLSharedTextureHandle;
pub use self::__MTLTexture::MTLTexture;
pub use self::__MTLTexture::MTLTextureCompressionType;
#[cfg(feature = "Metal_MTLTextureDescriptor")]
pub use self::__MTLTexture::MTLTextureDescriptor;
pub use self::__MTLTexture::MTLTextureSwizzle;
pub use self::__MTLTexture::MTLTextureSwizzleChannels;
pub use self::__MTLTexture::MTLTextureType;
pub use self::__MTLTexture::MTLTextureUsage;
pub use self::__MTLTexture::{MTLTextureCompressionTypeLossless, MTLTextureCompressionTypeLossy};
pub use self::__MTLTexture::{
    MTLTextureSwizzleAlpha, MTLTextureSwizzleBlue, MTLTextureSwizzleGreen, MTLTextureSwizzleOne,
    MTLTextureSwizzleRed, MTLTextureSwizzleZero,
};
pub use self::__MTLTexture::{
    MTLTextureType1D, MTLTextureType1DArray, MTLTextureType2D, MTLTextureType2DArray,
    MTLTextureType2DMultisample, MTLTextureType2DMultisampleArray, MTLTextureType3D,
    MTLTextureTypeCube, MTLTextureTypeCubeArray, MTLTextureTypeTextureBuffer,
};
pub use self::__MTLTexture::{
    MTLTextureUsagePixelFormatView, MTLTextureUsageRenderTarget, MTLTextureUsageShaderAtomic,
    MTLTextureUsageShaderRead, MTLTextureUsageShaderWrite, MTLTextureUsageUnknown,
};
pub use self::__MTLTypes::MTLCoordinate2D;
pub use self::__MTLTypes::MTLOrigin;
pub use self::__MTLTypes::MTLRegion;
pub use self::__MTLTypes::MTLResourceID;
pub use self::__MTLTypes::MTLSamplePosition;
pub use self::__MTLTypes::MTLSize;
#[cfg(feature = "Metal_MTLVertexAttributeDescriptor")]
pub use self::__MTLVertexDescriptor::MTLVertexAttributeDescriptor;
#[cfg(feature = "Metal_MTLVertexAttributeDescriptorArray")]
pub use self::__MTLVertexDescriptor::MTLVertexAttributeDescriptorArray;
#[cfg(feature = "Metal_MTLVertexBufferLayoutDescriptor")]
pub use self::__MTLVertexDescriptor::MTLVertexBufferLayoutDescriptor;
#[cfg(feature = "Metal_MTLVertexBufferLayoutDescriptorArray")]
pub use self::__MTLVertexDescriptor::MTLVertexBufferLayoutDescriptorArray;
#[cfg(feature = "Metal_MTLVertexDescriptor")]
pub use self::__MTLVertexDescriptor::MTLVertexDescriptor;
pub use self::__MTLVertexDescriptor::MTLVertexFormat;
pub use self::__MTLVertexDescriptor::MTLVertexStepFunction;
pub use self::__MTLVertexDescriptor::{
    MTLVertexFormatChar, MTLVertexFormatChar2, MTLVertexFormatChar2Normalized,
    MTLVertexFormatChar3, MTLVertexFormatChar3Normalized, MTLVertexFormatChar4,
    MTLVertexFormatChar4Normalized, MTLVertexFormatCharNormalized, MTLVertexFormatFloat,
    MTLVertexFormatFloat2, MTLVertexFormatFloat3, MTLVertexFormatFloat4,
    MTLVertexFormatFloatRG11B10, MTLVertexFormatFloatRGB9E5, MTLVertexFormatHalf,
    MTLVertexFormatHalf2, MTLVertexFormatHalf3, MTLVertexFormatHalf4, MTLVertexFormatInt,
    MTLVertexFormatInt1010102Normalized, MTLVertexFormatInt2, MTLVertexFormatInt3,
    MTLVertexFormatInt4, MTLVertexFormatInvalid, MTLVertexFormatShort, MTLVertexFormatShort2,
    MTLVertexFormatShort2Normalized, MTLVertexFormatShort3, MTLVertexFormatShort3Normalized,
    MTLVertexFormatShort4, MTLVertexFormatShort4Normalized, MTLVertexFormatShortNormalized,
    MTLVertexFormatUChar, MTLVertexFormatUChar2, MTLVertexFormatUChar2Normalized,
    MTLVertexFormatUChar3, MTLVertexFormatUChar3Normalized, MTLVertexFormatUChar4,
    MTLVertexFormatUChar4Normalized, MTLVertexFormatUChar4Normalized_BGRA,
    MTLVertexFormatUCharNormalized, MTLVertexFormatUInt, MTLVertexFormatUInt1010102Normalized,
    MTLVertexFormatUInt2, MTLVertexFormatUInt3, MTLVertexFormatUInt4, MTLVertexFormatUShort,
    MTLVertexFormatUShort2, MTLVertexFormatUShort2Normalized, MTLVertexFormatUShort3,
    MTLVertexFormatUShort3Normalized, MTLVertexFormatUShort4, MTLVertexFormatUShort4Normalized,
    MTLVertexFormatUShortNormalized,
};
pub use self::__MTLVertexDescriptor::{
    MTLVertexStepFunctionConstant, MTLVertexStepFunctionPerInstance, MTLVertexStepFunctionPerPatch,
    MTLVertexStepFunctionPerPatchControlPoint, MTLVertexStepFunctionPerVertex,
};
pub use self::__MTLVisibleFunctionTable::MTLVisibleFunctionTable;
#[cfg(feature = "Metal_MTLVisibleFunctionTableDescriptor")]
pub use self::__MTLVisibleFunctionTable::MTLVisibleFunctionTableDescriptor;
